@inherits Custom.Hybrid.RazorTyped
@using ToSic.Razor.Blade
@using ToSic.Sxc.Blocks
@using AppCode
@using AppCode.Data

@{
  Kit.Page.Activate("2sxc.JsCore");
  
  var viewConfigMode = MyPage.Parameters.Bool("viewconfigmode", fallback: false);
  var itemViewId = MyPage.Parameters.String("viewid", fallback: null);
  Guid parsedGuid;
  var item = string.IsNullOrEmpty(itemViewId) || !Guid.TryParse(itemViewId, out parsedGuid)
    ? MyItem
    : App.Data.GetOne<DataViewTableConfig>(parsedGuid);
}

<h1>@item.Title</h1>

<div class="form-check form-switch">
  <input
    class="form-check-input"
    type="checkbox"
    role="switch"
    id="flexSwitchCheckDefault"
    onchange="location.href='@($"{Link.To()}?viewconfigmode={!viewConfigMode}")'"
    @(viewConfigMode ? "checked" : "")
  >
  <label class="form-check-label" for="flexSwitchCheckDefault">View Config Mode</label>
</div>

<div @Kit.Toolbar.Default(item)>
  @* Tabulator ID *@
  <div id="azing-resources-table-@MyContext.Module.Id"></div>
</div>

@Kit.Page.TurnOn("window.table.createTabulatorTable()", data: new {
  name = "azing-resources-table-" + MyContext.Module.Id,
  moduleId = MyContext.Module.Id,
  viewId = item.Guid.ToString()
})

<script src="@App.Folder.Url/dist/scripts.js" @Kit.Page.AssetAttributes(position: "bottom")></script>
<link href="@App.Folder.Url/dist/styles.min.css" rel="stylesheet">

@Html.Raw("<script src=\"https://cdn.jsdelivr.net/npm/@floating-ui/core@1.6.9\"></script>")
@Html.Raw("<script src=\"https://cdn.jsdelivr.net/npm/@floating-ui/dom@1.6.13\"></script>")

@*

  - There are 2 ways of data loading immplemented 1) Call with Promise 2) Let Tabulator AJAX load
  - The Code is related to the values of the app - when outsourced needs to be more generic
 
*@