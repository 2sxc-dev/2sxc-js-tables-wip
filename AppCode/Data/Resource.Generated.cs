// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "Resource.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class Resource
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator
// App/Edition: azing Skills and Growth/
// User:        2sic Web-Developer
using System;
using System.Text.Json.Serialization;
using ToSic.Sxc.Adam;

namespace AppCode.Data
{
  // This is a generated class for Resource 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// Resource data. <br/>
  /// Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.AsDE`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class Resource: AutoGenerated.ZAutoGenResource
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.Resource in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZAutoGenResource: Custom.Data.CustomItem
  {
    /// <summary>
    /// AsDE as bool. <br/>
    /// To get nullable use .Get("AsDE") as bool?;
    /// </summary>
    public bool AsDE => _item.Bool("AsDE");

    /// <summary>
    /// AsEN as bool. <br/>
    /// To get nullable use .Get("AsEN") as bool?;
    /// </summary>
    public bool AsEN => _item.Bool("AsEN");

    /// <summary>
    /// Complexity as int. <br/>
    /// To get other types use methods such as .Decimal("Complexity")
    /// </summary>
    public int Complexity => _item.Int("Complexity");

    /// <summary>
    /// Description as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Description", scrubHtml: true) etc.
    /// </summary>
    public string Description => _item.String("Description", fallback: "");

    /// <summary>
    /// LifecycleFirst as DateTime.
    /// </summary>
    public DateTime LifecycleFirst => _item.DateTime("LifecycleFirst");

    /// <summary>
    /// LifecycleLatest as DateTime.
    /// </summary>
    public DateTime LifecycleLatest => _item.DateTime("LifecycleLatest");

    /// <summary>
    /// LocationOriginals as link (url). <br/>
    /// To get the underlying value like 'file:72' use String("LocationOriginals")
    /// </summary>
    public string LocationOriginals => _item.Url("LocationOriginals");

    /// <summary>
    /// Get the file object for LocationOriginals - or null if it's empty or not referencing a file.
    /// </summary>

    [JsonIgnore]
    public IFile LocationOriginalsFile => _item.File("LocationOriginals");

    /// <summary>
    /// Get the folder object for LocationOriginals.
    /// </summary>

    [JsonIgnore]
    public IFolder LocationOriginalsFolder => _item.Folder("LocationOriginals");

    /// <summary>
    /// LocationPublished as link (url). <br/>
    /// To get the underlying value like 'file:72' use String("LocationPublished")
    /// </summary>
    public string LocationPublished => _item.Url("LocationPublished");

    /// <summary>
    /// Get the file object for LocationPublished - or null if it's empty or not referencing a file.
    /// </summary>

    [JsonIgnore]
    public IFile LocationPublishedFile => _item.File("LocationPublished");

    /// <summary>
    /// Get the folder object for LocationPublished.
    /// </summary>

    [JsonIgnore]
    public IFolder LocationPublishedFolder => _item.Folder("LocationPublished");

    /// <summary>
    /// Progress as int. <br/>
    /// To get other types use methods such as .Decimal("Progress")
    /// </summary>
    public int Progress => _item.Int("Progress");

    /// <summary>
    /// ResourceStatus as single item of ResourceStatus.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. The type ResourceStatus was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public ResourceStatus ResourceStatus => _resourceStatus ??= _item.Child<ResourceStatus>("ResourceStatus");
    private ResourceStatus _resourceStatus;

    /// <summary>
    /// ResourceType as single item of ResourceType.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. The type ResourceType was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public ResourceType ResourceType => _resourceType ??= _item.Child<ResourceType>("ResourceType");
    private ResourceType _resourceType;

    /// <summary>
    /// Subject as single item of Subject.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. The type Subject was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public Subject Subject => _subject ??= _item.Child<Subject>("Subject");
    private Subject _subject;

    /// <summary>
    /// SubSubject as single item of SubSubject.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. The type SubSubject was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public SubSubject SubSubject => _subSubject ??= _item.Child<SubSubject>("SubSubject");
    private SubSubject _subSubject;

    /// <summary>
    /// Title as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Title", scrubHtml: true) etc.
    /// </summary>
    /// <remarks>
    /// This hides base property Title.
    /// To access original, convert using AsItem(...) or cast to ITypedItem.
    /// Consider renaming this field in the underlying content-type.
    /// </remarks>
    public new string Title => _item.String("Title", fallback: "");
  }
}