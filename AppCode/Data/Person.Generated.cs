// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "Person.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class Person
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator
// App/Edition: azing Skills and Growth/
// User:        2sic Web-Developer
using System.Collections.Generic;

namespace AppCode.Data
{
  // This is a generated class for Person 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// Person data. <br/>
  /// Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.Functions`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class Person: AutoGenerated.ZAutoGenPerson
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.Person in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZAutoGenPerson: Custom.Data.CustomItem
  {
    /// <summary>
    /// Functions as list of Functions.
    /// </summary>
    /// <remarks>
    /// Generated to return child-list child because field settings had Multi-Value=true. The type Functions was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// An IEnumerable of specified type, but can be empty.
    /// </returns>
    public IEnumerable<Functions> Functions => _functions ??= _item.Children<Functions>("Functions");
    private IEnumerable<Functions> _functions;

    /// <summary>
    /// Name as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Name", scrubHtml: true) etc.
    /// </summary>
    public string Name => _item.String("Name", fallback: "");

    /// <summary>
    /// NameId as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("NameId", scrubHtml: true) etc.
    /// </summary>
    public string NameId => _item.String("NameId", fallback: "");

    /// <summary>
    /// Roles as list of Roles.
    /// </summary>
    /// <remarks>
    /// Generated to return child-list child because field settings had Multi-Value=true. The type Roles was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// An IEnumerable of specified type, but can be empty.
    /// </returns>
    public IEnumerable<Roles> Roles => _roles ??= _item.Children<Roles>("Roles");
    private IEnumerable<Roles> _roles;
  }
}