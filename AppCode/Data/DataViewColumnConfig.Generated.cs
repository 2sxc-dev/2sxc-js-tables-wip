// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "DataViewColumnConfig.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class DataViewColumnConfig
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator
// App/Edition: 2sxc-Tables/
// User:        SuperUser Account
namespace AppCode.Data
{
  // This is a generated class for DataViewColumnConfig 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// DataViewColumnConfig data. <br/>
  /// Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.LinkEnable`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class DataViewColumnConfig: AutoGenerated.ZAutoGenDataViewColumnConfig
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.DataViewColumnConfig in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZAutoGenDataViewColumnConfig: Custom.Data.CustomItem
  {
    /// <summary>
    /// LinkEnable as bool. <br/>
    /// To get nullable use .Get("LinkEnable") as bool?;
    /// </summary>
    public bool LinkEnable => _item.Bool("LinkEnable");

    /// <summary>
    /// LinkParameters as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("LinkParameters", scrubHtml: true) etc.
    /// </summary>
    public string LinkParameters => _item.String("LinkParameters", fallback: "");

    /// <summary>
    /// LinkViewId as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("LinkViewId", scrubHtml: true) etc.
    /// </summary>
    public string LinkViewId => _item.String("LinkViewId", fallback: "");

    /// <summary>
    /// Title as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Title", scrubHtml: true) etc.
    /// </summary>
    /// <remarks>
    /// This hides base property Title.
    /// To access original, convert using AsItem(...) or cast to ITypedItem.
    /// Consider renaming this field in the underlying content-type.
    /// </remarks>
    public new string Title => _item.String("Title", fallback: "");

    /// <summary>
    /// TooltipEnabled as bool. <br/>
    /// To get nullable use .Get("TooltipEnabled") as bool?;
    /// </summary>
    public bool TooltipEnabled => _item.Bool("TooltipEnabled");

    /// <summary>
    /// TooltipSelector as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("TooltipSelector", scrubHtml: true) etc.
    /// </summary>
    public string TooltipSelector => _item.String("TooltipSelector", fallback: "");

    /// <summary>
    /// ValueFormat as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("ValueFormat", scrubHtml: true) etc.
    /// </summary>
    public string ValueFormat => _item.String("ValueFormat", fallback: "");

    /// <summary>
    /// ValueSelector as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("ValueSelector", scrubHtml: true) etc.
    /// </summary>
    public string ValueSelector => _item.String("ValueSelector", fallback: "");

    /// <summary>
    /// Width as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Width", scrubHtml: true) etc.
    /// </summary>
    public string Width => _item.String("Width", fallback: "");
  }
}