// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "Training.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class Training
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator
// App/Edition: Extension Sxc Tables/
// User:        2sic Web-Developer
using System;
using System.Collections.Generic;
using ToSic.Sxc.Data;

namespace AppCode.Data
{
  // This is a generated class for Training 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// Training data. <br/>
  /// Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.Attendees`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class Training: AutoGenerated.ZAutoGenTraining
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.Training in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZAutoGenTraining: Custom.Data.CustomItem
  {
    /// <summary>
    /// Attendees as list of ITypedItem.
    /// </summary>
    /// <remarks>
    /// Generated to return child-list child because field settings had Multi-Value=true. 
    /// </remarks>
    /// <returns>
    /// An IEnumerable of specified type, but can be empty.
    /// </returns>
    public IEnumerable<ITypedItem> Attendees => _attendees ??= _item.Children("Attendees");
    private IEnumerable<ITypedItem> _attendees;

    /// <summary>
    /// Date as DateTime.
    /// </summary>
    public DateTime Date => _item.DateTime("Date");

    /// <summary>
    /// IsPlanned as bool. <br/>
    /// To get nullable use .Get("IsPlanned") as bool?;
    /// </summary>
    public bool IsPlanned => _item.Bool("IsPlanned");

    /// <summary>
    /// Resources as single item of Resource.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. The type Resource was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public Resource Resources => _resources ??= _item.Child<Resource>("Resources");
    private Resource _resources;

    /// <summary>
    /// Title as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Title", scrubHtml: true) etc.
    /// </summary>
    /// <remarks>
    /// This hides base property Title.
    /// To access original, convert using AsItem(...) or cast to ITypedItem.
    /// Consider renaming this field in the underlying content-type.
    /// </remarks>
    public new string Title => _item.String("Title", fallback: "");

    /// <summary>
    /// Trainer as single item of Person.
    /// </summary>
    /// <remarks>
    /// Generated to only return 1 child because field settings had Multi-Value=false. The type Person was specified in the field settings.
    /// </remarks>
    /// <returns>
    /// A single item OR null if nothing found, so you can use ?? to provide alternate objects.
    /// </returns>
    public Person Trainer => _trainer ??= _item.Child<Person>("Trainer");
    private Person _trainer;
  }
}